pipeline {
    agent any
    tools { 
        maven 'Maven3' 
        
    }
    stages {
        stage('Build') {
            steps {
                
                bat 'mvn -B -DskipTests clean package'
                
            }
        }
        stage('Test') {
            steps {
                bat 'mvn test'
            }
        }
        
        stage('sonarqube analysis'){
            steps{
                withSonarQubeEnv("sonarserver")
    {
        
        
          //TODO this should run in a container
            //bat "mvn sonar:sonar"
        bat "echo hi"
        //-Dsonar.analysis.mode=publish -Dsonar.projectDate= -Dsonar.sourceEncoding=UTF-8 -Dsonar.verbose=true -Dsonar.projectName= -Dsonar.projectVersion=${sonarQubeRelease} -Dsonar.projectKey=${key}"
            //Execute this command if the compile type is maven
        
    }
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                    //emailext attachmentsPattern: 'target/surefire-reports/*.xml', body: 'hi', subject: 'mail', to: 'sudhakar.pro00@gmail.com' 
                    // emailext attachLog: true, body: '${env.BUILD_URL}',recipientProviders: [developers()], subject: 'jenkins', to: 'sudhakar.pro00@gmail.com'
                    
                }
            }
        }
        stage('Deliver') {
            steps {
               rtUpload (
    serverId: 'jfrogartifactory',
    spec: '''{
          "files": [
            {
              "pattern": "target/mvn-hello-world.war",
              "target": "libs-snapshot-local/"
            }
         ]
    }''',
 
    // Optional - Associate the uploaded files with the following custom build name and build number,
    // as build artifacts.
    // If not set, the files will be associated with the default build name and build number (i.e the
    // the Jenkins job name and number).
    buildName: 'holyFrog',
    buildNumber: "${env.BUILD_NUMBER}"
)
            }
        }
        
        stage("trigger deployment")
        {
            
            steps{
                
                build job: 'testpipeline', parameters: [string(name: 'buildnumber', value: "${env.BUILD_NUMBER}")]
              
            }
        }
    }
}
